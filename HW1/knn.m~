function predlabels = knn(traindata, trainlabels, testdata, k, f, D)

% traindata is a ntrain x ndim matrix that represents your training data (each row is one picture and each column is a feature);
% trainlabels is an ntrain x 1 vector holding the labels (integers between 1 and 8) for the training data;
% testdata is a ntest x ndim matrix that represents your testing data;
% k is number of neighbors;
% f is the distance function you will use (e.g f=?sqeuclidean?);
% D is an ntrain x ntest matrix of precomputed pairwise distances (optional in the function input and your inside code should handle the case where it does not exist, e.g. by calling f); 
% predlabels is ntest x 1 vector holding predicted labels for the test instances.

%check the dimensions of both the incoming vectors
train_dims = size(traindata);
test_dims = size(testdata);

    %Create a matrix where each row is a copy of the test data
    test_matrix = ones(train_dims(1), 1) * testdata;

    difference_matrix = traindata - test_matrix;
    distance_matrix = difference_matrix * difference_matrix.';

    distance_diagonals = distance_matrix .* eye(size(distance_matrix));

    min_distance = min(distance_matrix(distance_diagonals~=0));
    [row col] = find(abs(distance_diagonals)==min_distance);

    predlabels = trainlabels(row(1));
